{"version":3,"sources":["components/OperationOptions.js","distributions/Factorial.js","distributions/BinomialDistribution.js","components/DistrbutionOptions.js","distributions/GeometricDistribution.js","distributions/UniformContinuousDistribution.js","distributions/PoissionDistribution.js","components/DistributionParam.js","components/Distributions.js","App.js","serviceWorker.js","index.js"],"names":["operationOptions","value","label","factorial","x","parseInt","isNaN","Infinity","y","i","distributionOptions","func","n","p","prob","k","choose","Math","pow","mean","var","discrete","params","b","a","_","lambda","exp","DistributionParam","props","keyName","id","className","type","param","onChange","Distributions","calculateProbability","sumIt","distrbFunc","state","distribution","operation","upper","setState","output","variance","handleLower","e","lower","target","handleUpper","handleOperation","handleRandomVar","randomVariable","handleDistribution","applyDistFunction","newDist","currentState","handleParamsChange","targetId","newParams","this","Row","Col","xs","htmlFor","options","style","display","backgroundColor","margin","padding","textAlign","justifyContent","Object","keys","map","key","getDistrbutionParams","color","sqrt","React","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e41443d.chunk.js","sourcesContent":["const operationOptions = [\r\n  { value: \"<=\", label: \"<=\" },\r\n  { value: \"=\", label: \"=\" }\r\n  //   { value: \">=\", label: \">=\" },\r\n  //   { value: \"<\", label: \"<\" },\r\n  //   { value: \">\", label: \">\" }\r\n];\r\nexport default operationOptions;\r\n","function factorial(x) {\r\n  // validating the input\r\n  x = parseInt(x, 10);\r\n  if (isNaN(x)) return 1;\r\n\r\n  // if x below 0, return 1\r\n  if (x <= 0) return 1;\r\n  // if x above 170, return infinity\r\n  if (x > 170) return Infinity;\r\n  // calculating the factorial\r\n  var y = 1;\r\n  for (var i = x; i > 0; i--) {\r\n    y *= i;\r\n  }\r\n  return y;\r\n}\r\n\r\nexport default factorial;\r\n","import factorial from \"./Factorial\";\r\n\r\nfunction choose(n, k) {\r\n  // validating the input\r\n  n = parseInt(n, 10);\r\n  if (isNaN(n)) n = 0;\r\n  if (n < 0) n = 0;\r\n\r\n  k = parseInt(k, 10);\r\n  if (isNaN(k)) k = 0;\r\n  if (k < 0) k = 0;\r\n  if (k > n) k = n;\r\n\r\n  return factorial(n) / (factorial(k) * factorial(n - k));\r\n}\r\n\r\nconst binomialDistribution = ({ n, p }) => {\r\n  return {\r\n    prob: x => choose(n, x) * Math.pow(p, x) * Math.pow(1 - p, n - x),\r\n    mean: p,\r\n    var: (1 - p) * p,\r\n    discrete: true\r\n  };\r\n};\r\nexport default binomialDistribution;\r\n","import geometricDistribution from \"../distributions/GeometricDistribution\";\r\nimport binomialDistribution from \"../distributions/BinomialDistribution\";\r\nimport uniformContinuousDistribution from \"../distributions/UniformContinuousDistribution\";\r\nimport poissionDistribution from \"../distributions/PoissionDistribution\";\r\n\r\nconst distributionOptions = [\r\n  {\r\n    value: \"binomial\",\r\n    label: \"binomial\",\r\n    func: binomialDistribution,\r\n    discrete: true,\r\n    params: {\r\n      n: 0,\r\n      p: 0\r\n    }\r\n  },\r\n  {\r\n    value: \"geometric\",\r\n    label: \"geometric\",\r\n    func: geometricDistribution,\r\n    discrete: true,\r\n    params: {\r\n      p: 0\r\n    }\r\n  },\r\n  {\r\n    value: \"uniform-continuous\",\r\n    label: \"uniform continuous\",\r\n    discrete: true,\r\n    func: uniformContinuousDistribution,\r\n    params: { b: 0, a: 0 }\r\n  },\r\n  //   { value: \"uniform-discrete\", label: \"uniform discrete\", discrete: true },\r\n\r\n  {\r\n    value: \"poission\",\r\n    label: \"poission\",\r\n    discrete: true,\r\n    func: poissionDistribution,\r\n    params: { lambda: 0 }\r\n  }\r\n  //   { value: \"gamma\", label: \"gamma\", discrete: false },\r\n  //   { value: \"exponential\", label: \"exponential\", discrete: false },\r\n  //   { value: \"normal\", label: \"normal\", discrete: false }\r\n];\r\n\r\nexport default distributionOptions;\r\n","const geometricDistribution = ({ p }) => {\r\n  return {\r\n    prob: x => Math.pow(1 - p, x - 1) * p,\r\n    mean: 1 / p,\r\n    var: (1 - p) / (p * p),\r\n    discrete: true\r\n  };\r\n};\r\n\r\nexport default geometricDistribution;\r\n","const uniformContinuousDistribution = ({ b, a }) => {\r\n  return {\r\n    prob: _ => 1 / (b - a),\r\n    mean: (a + b) / 2,\r\n    var: ((b - a) * (b - a)) / 12,\r\n    discrete: true\r\n  };\r\n};\r\nexport default uniformContinuousDistribution;\r\n","import factorial from \"./Factorial\";\r\n\r\nconst poissionDistribution = ({ lambda }) => {\r\n  return {\r\n    prob: x => (Math.pow(lambda, x) * Math.exp(-lambda)) / factorial(x),\r\n    mean: lambda,\r\n    var: lambda\r\n  };\r\n};\r\nexport default poissionDistribution;\r\n","import React from \"react\";\r\n\r\nconst DistributionParam = props => {\r\n  return (\r\n    <span>\r\n      <label>{props.keyName}</label>\r\n      <input\r\n        id={props.keyName}\r\n        className=\"form-control\"\r\n        type=\"number\"\r\n        value={props.param}\r\n        onChange={props.onChange}\r\n      />\r\n    </span>\r\n  );\r\n  // return <input value={props.param} />;\r\n};\r\n\r\nexport default DistributionParam;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport operationOptions from \"./OperationOptions\";\r\nimport distributionOptions from \"./DistrbutionOptions\";\r\nimport DistributionParam from \"./DistributionParam\";\r\n\r\nexport default class Distributions extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      randomVariable: \"X\",\r\n      lower: 0,\r\n      upper: 8,\r\n      operation: operationOptions[0],\r\n      distribution: distributionOptions[0],\r\n      mean: 0,\r\n      variance: 0,\r\n      output: 0,\r\n      params: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleDistribution(this.state.distribution);\r\n  }\r\n\r\n  calculateProbability = () => {\r\n    let sumIt = 0;\r\n\r\n    const distrbFunc = this.state.distribution.func(this.state.params);\r\n    if (this.state.distribution.discrete) {\r\n      if (this.state.operation.value === \"<=\") {\r\n        for (let x = 0; x <= this.state.upper; x++) {\r\n          const p_of_x = distrbFunc.prob(x);\r\n          sumIt += p_of_x;\r\n        }\r\n      } else {\r\n        for (let x = 0; x < this.state.upper; x++) {\r\n          sumIt += distrbFunc.prob(x);\r\n        }\r\n      }\r\n\r\n      this.setState({ output: sumIt });\r\n    } else {\r\n    }\r\n\r\n    this.setState({ mean: distrbFunc.mean, variance: distrbFunc.var });\r\n  };\r\n\r\n  handleLower = e => {\r\n    this.setState({ lower: e.target.value }, () => {\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  handleUpper = e => {\r\n    this.setState({ upper: e.target.value }, () => {\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  handleOperation = operation => {\r\n    this.setState({ operation }, () => {\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  handleRandomVar = e => {\r\n    this.setState({ randomVariable: e.target.value });\r\n  };\r\n\r\n  handleDistribution = distribution => {\r\n    this.setState({ distribution, params: { ...distribution.params } }, () => {\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  applyDistFunction = () => {\r\n    const newDist = { ...this.state.distribution };\r\n    const currentState = this.state;\r\n    currentState.mean = newDist.func(this.state.params).mean;\r\n    currentState.variance = newDist.func(this.state.params).variance;\r\n    this.setState(currentState);\r\n  };\r\n\r\n  handleParamsChange = e => {\r\n    const targetId = e.target.id;\r\n    const newParams = { ...this.state.params };\r\n    newParams[targetId] = e.target.value;\r\n    this.setState({ params: newParams }, () => {\r\n      this.applyDistFunction();\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Calculate Probability</h2>\r\n        <Row>\r\n          <Col xs=\"2\">\r\n            <label htmlFor=\"rand-var\">Random Variable:</label>{\" \"}\r\n            <input\r\n              className=\"form-control\"\r\n              id=\"rand-var\"\r\n              type=\"text\"\r\n              value={this.state.randomVariable}\r\n              onChange={this.handleRandomVar}\r\n            />\r\n          </Col>\r\n          <Col xs=\"4\">\r\n            <label htmlFor=\"select-op\">Select Value: </label>\r\n            <Select\r\n              id=\"select-op\"\r\n              value={this.state.operation}\r\n              onChange={this.handleOperation}\r\n              options={operationOptions}\r\n            />\r\n          </Col>\r\n          <Col xs=\"4\">\r\n            <label htmlFor=\"select-dist\">Select Distribution: </label>\r\n            <Select\r\n              id=\"select-dist\"\r\n              value={this.state.distribution}\r\n              onChange={this.handleDistribution}\r\n              options={distributionOptions}\r\n            />\r\n          </Col>\r\n          <Col xs=\"2\">\r\n            <label htmlFor=\"upper-bound-value\">Upper value:</label>{\" \"}\r\n            <input\r\n              className=\"form-control\"\r\n              id=\"upper-bound-value\"\r\n              type=\"number\"\r\n              value={this.state.upper}\r\n              onChange={this.handleUpper}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            backgroundColor: \"lightgreen\",\r\n            margin: \"2rem\",\r\n            padding: \"1rem\",\r\n            textAlign: \"center\",\r\n            justifyContent: \"center\"\r\n          }}\r\n        >\r\n          <Col xs={2}>\r\n            {Object.keys(this.state.params).map(k => {\r\n              return (\r\n                <div key={k}>\r\n                  <DistributionParam\r\n                    keyName={k}\r\n                    param={this.state.params[k]}\r\n                    onChange={this.handleParamsChange}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </Col>\r\n          <Col>\r\n            {`${this.state.randomVariable} ~ ${\r\n              this.state.distribution.value\r\n            }(${getDistrbutionParams(this.state.params)})`}\r\n          </Col>\r\n        </div>\r\n        <Row\r\n          style={{\r\n            display: \"flex\",\r\n            backgroundColor: \"lightblue\",\r\n            margin: \"2rem\",\r\n            padding: \"1rem\",\r\n            textAlign: \"center\",\r\n            justifyContent: \"center\"\r\n          }}\r\n        >\r\n          <Row>\r\n            {`P(${this.state.randomVariable} ${\r\n              this.state.operation.value\r\n                ? this.state.operation.value\r\n                : \"Operation?\"\r\n            } ${this.state.upper}) = ${this.state.output}`}\r\n          </Row>\r\n        </Row>\r\n        <Row\r\n          style={{\r\n            backgroundColor: \"orange\",\r\n            margin: \"2rem\",\r\n            padding: \"2rem\",\r\n            textAlign: \"center\",\r\n            color: \"black\",\r\n            justifyContent: \"center\"\r\n          }}\r\n        >\r\n          <Col>{`Mean = ${this.state.mean}`}</Col>\r\n          <Col>\r\n            {`Var(${this.state.randomVariable}) = ${this.state.variance}`}\r\n          </Col>\r\n          <Col>{`Sd(${this.state.randomVariable}) = ${Math.sqrt(\r\n            this.state.variance\r\n          )}`}</Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getDistrbutionParams = params => {\r\n  return Object.keys(params).map(p => {\r\n    return `${p}=${params[p]}`;\r\n  });\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Distribution from \"./components/Distributions\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Distribution />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}