{"version":3,"sources":["components/OperationOptions.js","distributions/Factorial.js","distributions/BinomialDistribution.js","components/DistrbutionOptions.js","distributions/GeometricDistribution.js","distributions/UniformContinuousDistribution.js","distributions/PoissionDistribution.js","components/DisplayExpectations.js","components/DisplayProbability.js","components/DisplayDistribution.js","components/DistributionParam.js","components/DisplayParams.js","components/DisplayDistributionForm.js","components/Distributions.js","components/DistributionList.js","App.js","serviceWorker.js","index.js"],"names":["operationOptions","value","label","factorial","x","parseInt","isNaN","Infinity","y","i","distributionOptions","func","n","p","prob","k","choose","Math","pow","mean","var","discrete","params","b","a","_","lambda","exp","DisplayExpectations","props","Row","style","backgroundColor","margin","padding","textAlign","color","justifyContent","Col","randomVariable","variance","toFixed","sqrt","DisplayProbability","upper","output","DisplayDistrbution","display","getDistrbutionParams","Object","keys","map","DistributionParam","keyName","id","className","type","param","onChange","DisplayParams","key","DisplayDistrbutionForm","xs","htmlFor","handleRandomVar","operation","handleOperation","options","distribution","handleDistribution","handleUpper","Distributions","calculateProbability","sumIt","state","operationValue","distrbFunc","sumUpToX","setState","handleLower","e","lower","target","applyDistFunction","newDist","currentState","handleParamsChange","targetId","newParams","this","DisplayDistribution","React","Component","DistributionList","v","to","App","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Container","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc0d1d6a.chunk.js","sourcesContent":["const operationOptions = [\r\n  { value: \"<=\", label: \"<=\" },\r\n  { value: \"=\", label: \"=\" }\r\n  //   { value: \">=\", label: \">=\" },\r\n  //   { value: \"<\", label: \"<\" },\r\n  //   { value: \">\", label: \">\" }\r\n];\r\nexport default operationOptions;\r\n","function factorial(x) {\r\n  // validating the input\r\n  x = parseInt(x, 10);\r\n  if (isNaN(x)) return 1;\r\n\r\n  // if x below 0, return 1\r\n  if (x <= 0) return 1;\r\n  // if x above 170, return infinity\r\n  if (x > 170) return Infinity;\r\n  // calculating the factorial\r\n  var y = 1;\r\n  for (var i = x; i > 0; i--) {\r\n    y *= i;\r\n  }\r\n  return y;\r\n}\r\n\r\nexport default factorial;\r\n","import factorial from \"./Factorial\";\r\n\r\nfunction choose(n, k) {\r\n  // validating the input\r\n  n = parseInt(n, 10);\r\n  if (isNaN(n)) n = 0;\r\n  if (n < 0) n = 0;\r\n\r\n  k = parseInt(k, 10);\r\n  if (isNaN(k)) k = 0;\r\n  if (k < 0) k = 0;\r\n  if (k > n) k = n;\r\n\r\n  return factorial(n) / (factorial(k) * factorial(n - k));\r\n}\r\n\r\nconst binomialDistribution = ({ n, p }) => {\r\n  return {\r\n    prob: x => choose(n, x) * Math.pow(p, x) * Math.pow(1 - p, n - x),\r\n    mean: p,\r\n    var: (1 - p) * p,\r\n    discrete: true\r\n  };\r\n};\r\nexport default binomialDistribution;\r\n","import geometricDistribution from \"../distributions/GeometricDistribution\";\r\nimport binomialDistribution from \"../distributions/BinomialDistribution\";\r\nimport uniformContinuousDistribution from \"../distributions/UniformContinuousDistribution\";\r\nimport poissionDistribution from \"../distributions/PoissionDistribution\";\r\n\r\nconst distributionOptions = [\r\n  {\r\n    value: \"binomial\",\r\n    label: \"binomial\",\r\n    func: binomialDistribution,\r\n    discrete: true,\r\n    params: {\r\n      n: 0,\r\n      p: 0\r\n    }\r\n  },\r\n  {\r\n    value: \"geometric\",\r\n    label: \"geometric\",\r\n    func: geometricDistribution,\r\n    discrete: true,\r\n    params: {\r\n      p: 0\r\n    }\r\n  },\r\n  {\r\n    value: \"uniform-continuous\",\r\n    label: \"uniform continuous\",\r\n    discrete: true,\r\n    func: uniformContinuousDistribution,\r\n    params: { b: 0, a: 0 }\r\n  },\r\n  //   { value: \"uniform-discrete\", label: \"uniform discrete\", discrete: true },\r\n\r\n  {\r\n    value: \"poission\",\r\n    label: \"poission\",\r\n    discrete: true,\r\n    func: poissionDistribution,\r\n    params: { lambda: 0 }\r\n  }\r\n  //   { value: \"gamma\", label: \"gamma\", discrete: false },\r\n  //   { value: \"exponential\", label: \"exponential\", discrete: false },\r\n  //   { value: \"normal\", label: \"normal\", discrete: false }\r\n];\r\n\r\nexport default distributionOptions;\r\n","const geometricDistribution = ({ p }) => {\r\n  return {\r\n    prob: x => Math.pow(1 - p, x - 1) * p,\r\n    mean: 1 / p,\r\n    var: (1 - p) / (p * p),\r\n    discrete: true\r\n  };\r\n};\r\n\r\nexport default geometricDistribution;\r\n","const uniformContinuousDistribution = ({ b, a }) => {\r\n  return {\r\n    prob: _ => 1 / (b - a),\r\n    mean: (a + b) / 2,\r\n    var: ((b - a) * (b - a)) / 12,\r\n    discrete: true\r\n  };\r\n};\r\nexport default uniformContinuousDistribution;\r\n","import factorial from \"./Factorial\";\r\n\r\nconst poissionDistribution = ({ lambda }) => {\r\n  return {\r\n    prob: x => (Math.pow(lambda, x) * Math.exp(-lambda)) / factorial(x),\r\n    mean: lambda,\r\n    var: lambda\r\n  };\r\n};\r\nexport default poissionDistribution;\r\n","import { Row, Col } from \"react-bootstrap\";\r\nimport React from \"react\";\r\n\r\nconst DisplayExpectations = props => {\r\n  return (\r\n    <Row\r\n      style={{\r\n        backgroundColor: \"orange\",\r\n        margin: \"2rem\",\r\n        padding: \"2rem\",\r\n        textAlign: \"center\",\r\n        color: \"black\",\r\n        justifyContent: \"center\"\r\n      }}\r\n    >\r\n      <Col>{`Mean = ${props.mean}`}</Col>\r\n      <Col>{`Var(${props.randomVariable}) = ${props.variance.toFixed(3)}`}</Col>\r\n      <Col>{`Sd(${props.randomVariable}) = ${Math.sqrt(props.variance).toFixed(\r\n        3\r\n      )}`}</Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default DisplayExpectations;\r\n","import React from \"react\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst DisplayProbability = props => {\r\n  return (\r\n    <Row>\r\n      {`P(${props.randomVariable} ${props.value ? props.value : \"Operation?\"} ${\r\n        props.upper\r\n      }) = ${props.output.toFixed(3)}`}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default DisplayProbability;\r\n","import React from \"react\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst DisplayDistrbution = props => {\r\n  return (\r\n    <Row\r\n      style={{\r\n        display: \"flex\",\r\n        backgroundColor: \"lightgreen\",\r\n        margin: \"2rem\",\r\n        padding: \"1rem\",\r\n        textAlign: \"center\",\r\n        justifyContent: \"center\"\r\n      }}\r\n    >\r\n      {`${props.randomVariable} ~ ${props.value}(${getDistrbutionParams(\r\n        props.params\r\n      )})`}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default DisplayDistrbution;\r\n\r\nconst getDistrbutionParams = params => {\r\n  return Object.keys(params).map(p => {\r\n    return `${p}=${params[p]}`;\r\n  });\r\n};\r\n","import React from \"react\";\r\n\r\nconst DistributionParam = props => {\r\n  return (\r\n    <span>\r\n      <label>{props.keyName}</label>\r\n      <input\r\n        id={props.keyName}\r\n        className=\"form-control\"\r\n        type=\"number\"\r\n        value={props.param}\r\n        onChange={props.onChange}\r\n      />\r\n    </span>\r\n  );\r\n  // return <input value={props.param} />;\r\n};\r\n\r\nexport default DistributionParam;\r\n","import React from \"react\";\r\nimport DistributionParam from \"./DistributionParam\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst DisplayParams = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        backgroundColor: \"lightgreen\",\r\n        margin: \"2rem\",\r\n        padding: \"1rem\",\r\n        textAlign: \"center\",\r\n        justifyContent: \"center\"\r\n      }}\r\n    >\r\n      <Row>\r\n        {Object.keys(props.params).map(k => {\r\n          return (\r\n            <div key={k}>\r\n              <DistributionParam\r\n                keyName={k}\r\n                param={props.params[k]}\r\n                onChange={props.onChange}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayParams;\r\n","import { Row, Col } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Select from \"react-select\";\r\n\r\nimport operationOptions from \"./OperationOptions\";\r\nimport distributionOptions from \"./DisplayDistribution\";\r\n\r\nconst DisplayDistrbutionForm = props => {\r\n  return (\r\n    <Row>\r\n      <Col xs=\"2\">\r\n        <label htmlFor=\"rand-var\">Random Variable:</label>\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"rand-var\"\r\n          type=\"text\"\r\n          value={props.randomVariable}\r\n          onChange={props.handleRandomVar}\r\n        />\r\n      </Col>\r\n      <Col xs=\"4\">\r\n        <label htmlFor=\"select-op\">Select Value: </label>\r\n        <Select\r\n          id=\"select-op\"\r\n          value={props.operation}\r\n          onChange={props.handleOperation}\r\n          options={operationOptions}\r\n        />\r\n      </Col>\r\n      <Col xs=\"4\">\r\n        <label htmlFor=\"select-dist\">Select Distribution: </label>\r\n        <Select\r\n          id=\"select-dist\"\r\n          value={props.distribution}\r\n          onChange={props.handleDistribution}\r\n          options={distributionOptions}\r\n        />\r\n      </Col>\r\n      <Col xs=\"2\">\r\n        <label htmlFor=\"upper-bound-value\">Upper value:</label>\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"upper-bound-value\"\r\n          type=\"number\"\r\n          value={props.upper}\r\n          onChange={props.handleUpper}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nDisplayDistrbutionForm.propTypes = {\r\n  randomVariable: PropTypes.string,\r\n  handleRandomVar: PropTypes.func,\r\n  operation: PropTypes.object,\r\n  handleOperation: PropTypes.func,\r\n  distribution: PropTypes.object,\r\n  handleDistribution: PropTypes.func,\r\n  upper: PropTypes.number,\r\n  handleUpper: PropTypes.func\r\n};\r\n\r\nexport default DisplayDistrbutionForm;\r\n","import React from \"react\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport operationOptions from \"./OperationOptions\";\r\nimport distributionOptions from \"./DistrbutionOptions\";\r\nimport DisplayExpectations from \"./DisplayExpectations\";\r\nimport DisplayProbability from \"./DisplayProbability\";\r\nimport DisplayDistribution from \"./DisplayDistribution\";\r\nimport DisplayParams from \"./DisplayParams\";\r\nimport DisplayDistrbutionForm from \"./DisplayDistributionForm\";\r\n\r\nexport default class Distributions extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      randomVariable: \"X\",\r\n      lower: 0,\r\n      upper: 8,\r\n      operation: operationOptions[0],\r\n      distribution: distributionOptions[0],\r\n      mean: 0,\r\n      variance: 0,\r\n      output: 0,\r\n      params: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleDistribution(this.state.distribution);\r\n  }\r\n\r\n  calculateProbability = () => {\r\n    let sumIt = 0;\r\n\r\n    const upper = this.state.upper;\r\n    const operationValue = this.state.operation.value;\r\n    const distrbFunc = this.state.distribution.func(this.state.params);\r\n\r\n    if (this.state.distribution.discrete) {\r\n      // TODO: apply the central limit theorem here\r\n      // also might need a switch statement\r\n      if (operationValue === \"<=\") {\r\n        sumIt = sumUpToX(upper, distrbFunc) + distrbFunc.prob(upper);\r\n      } else if (operationValue === \"<\") {\r\n        sumIt = sumUpToX(upper, distrbFunc);\r\n      } else if (operationValue === \">\") {\r\n        sumIt = 1 - (sumUpToX(upper, distrbFunc) + distrbFunc.prob(upper));\r\n      } else if (operationValue === \">=\") {\r\n        sumIt = 1 - sumUpToX(upper, distrbFunc);\r\n      } else if (operationValue === \"=\") {\r\n        sumIt = distrbFunc.prob(upper);\r\n      }\r\n      this.setState({ output: sumIt });\r\n    } else {\r\n    }\r\n\r\n    this.setState({ mean: distrbFunc.mean, variance: distrbFunc.var });\r\n  };\r\n\r\n  handleLower = e => {\r\n    this.setState({ lower: e.target.value }, () => {\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  handleUpper = e => {\r\n    this.setState({ upper: e.target.value }, () => {\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  handleOperation = operation => {\r\n    this.setState({ operation }, () => {\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  handleRandomVar = e => {\r\n    this.setState({ randomVariable: e.target.value });\r\n  };\r\n\r\n  handleDistribution = distribution => {\r\n    this.setState({ distribution, params: { ...distribution.params } }, () => {\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  applyDistFunction = () => {\r\n    const newDist = { ...this.state.distribution };\r\n    const currentState = this.state;\r\n    currentState.mean = newDist.func(this.state.params).mean;\r\n    currentState.variance = newDist.func(this.state.params).variance;\r\n    this.setState(currentState);\r\n  };\r\n\r\n  handleParamsChange = e => {\r\n    const targetId = e.target.id;\r\n    const newParams = { ...this.state.params };\r\n    newParams[targetId] = e.target.value;\r\n    this.setState({ params: newParams }, () => {\r\n      this.applyDistFunction();\r\n      this.calculateProbability();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Calculate Probability</h2>\r\n        <DisplayDistrbutionForm\r\n          randomVariable={this.state.randomVariable}\r\n          handleRandomVar={this.handleRandomVar}\r\n          operation={this.state.operation}\r\n          handleOperation={this.handleOperation}\r\n          distribution={this.state.distribution}\r\n          handleDistribution={this.handleDistribution}\r\n          upper={+this.state.upper}\r\n          handleUpper={this.handleUpper}\r\n        />\r\n        <DisplayParams\r\n          params={this.state.params}\r\n          onChange={this.handleParamsChange}\r\n        />\r\n        <DisplayDistribution\r\n          randomVariable={this.state.randomVariable}\r\n          params={this.state.params}\r\n          value={this.state.distribution.value}\r\n        />\r\n\r\n        <Row\r\n          style={{\r\n            display: \"flex\",\r\n            backgroundColor: \"lightblue\",\r\n            margin: \"2rem\",\r\n            padding: \"1rem\",\r\n            textAlign: \"center\",\r\n            justifyContent: \"center\"\r\n          }}\r\n        >\r\n          <DisplayProbability\r\n            randomVariable={this.state.randomVariable}\r\n            value={this.state.operation.value}\r\n            upper={this.state.upper}\r\n            output={this.state.output}\r\n          />\r\n        </Row>\r\n        <DisplayExpectations\r\n          mean={this.state.mean}\r\n          variance={this.state.variance}\r\n          randomVariable={this.state.randomVariable}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst sumUpToX = (upper, distrbFunc) => {\r\n  let sumIt = 0;\r\n  for (let x = 0; x < upper; x++) {\r\n    const p_of_x = distrbFunc.prob(x);\r\n    sumIt += p_of_x;\r\n  }\r\n  return sumIt;\r\n};\r\n","import React from \"react\";\r\nimport distributionOptions from \"./DistrbutionOptions\";\r\nimport { Link } from \"react-router-dom\";\r\n// import RouteDistribution from \"./RouteDistribution\";\r\n// TODO: figure out how to route to another page\r\nconst DistributionList = () => {\r\n  return (\r\n    <div>\r\n      {/* <Router> */}\r\n      <h2>List of Distributions</h2>\r\n      <ul>\r\n        {/* <Link to={`/test`}>{\"test\"}</Link> */}\r\n\r\n        {distributionOptions.map(v => (\r\n          <li key={v.value}>\r\n            <Link to={`/${v.value}`}>{v.label}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {/* <Switch>\r\n        <Route exact path={`/distributions/test`}>\r\n          <RouteDistribution label={\"test\"} />\r\n        </Route> */}\r\n      {/* {distributionOptions.map(v => (\r\n          <div key={`route-${v.value}`}>\r\n            <Route exact path={`/distributions/${v.value}`}>\r\n              <RouteDistribution label={v.label} />\r\n            </Route>\r\n          </div>\r\n        ))} */}\r\n      {/* </Switch> */}\r\n      {/* </Router> */}\r\n    </div>\r\n  );\r\n};\r\nexport default DistributionList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Distribution from \"./components/Distributions\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport DistributionList from \"./components/DistributionList\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">StatsPKG</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto ml-auto\">\n              <li className={\"nav-link\"}>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className={\"nav-link\"}>\n                <Link to=\"/distributions\">Distribution</Link>\n              </li>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <div className={\"mt-4 mb-4\"}>\n          <Container>\n            <Switch>\n              <Route exact path=\"/\">\n                <Distribution />\n              </Route>\n              <Route path=\"/distributions\">\n                <DistributionList />\n              </Route>\n            </Switch>\n          </Container>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}